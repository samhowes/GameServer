{
  "name": "validictorian",
  "version": "0.0.1",
  "description": "Node validations without ties to any framework. Based on validator.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/samora/validictorian.git"
  },
  "keywords": [
    "validator",
    "validation",
    "validate",
    "koa",
    "express"
  ],
  "author": {
    "name": "Samora Dake"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/samora/validictorian/issues"
  },
  "homepage": "https://github.com/samora/validictorian",
  "dependencies": {
    "validator": "~3.6.0"
  },
  "devDependencies": {
    "should": "~3.2.0"
  },
  "readme": "# validictorian\r\n\r\nNode validations without ties to any framework. Based on [validator](https://github.com/chriso/validator.js).\r\n\r\n## Inspiration & Purpose\r\n\r\n[validator](https://github.com/chriso/validator.js) is a great validation tool, \r\nbut when building apps with frameworks such as [koa](http://koajs.com/) or [express](expressjs.com)\r\nyou usually want something that abstracts away some of those details.\r\n\r\n[express-validator](https://github.com/ctavan/express-validator) satisfies this need when using express.\r\nWhat about other frameworks? This is the dilemma I came across when I decided to start using koa.\r\n\r\nValidictorian solves this issue, by simply abstracting away enough of the validation logic yet making it\r\nsimple enough to handle validations using any framework.\r\n\r\n## Usage\r\n\r\n```\r\nnpm install validictorian\r\n```\r\n\r\nJust pass in the object to be validated (eg. request body) and validation rules. \r\n\r\n__NOTE__: Fields in object to be validated cannot be nested.\r\n\r\nReturns `null` if no errors, else returns an array of error messages. You can also pass in\r\n`true` as third parameter to output mapped error messages.\r\n\r\nExample using [Express](expressjs.com), assuming `express.bodyParser()` middleware is already setup:\r\n```javascript\r\nvar validate = require('validictorian');\r\n\r\napp.post('/users', function (req, res){\r\n\r\n  var rules = {\r\n    name: {\r\n      isLength: {\r\n        args: [1],\r\n        msg: 'Name is required.'\r\n      }\r\n    },\r\n\r\n    email: {\r\n      isLength: {\r\n        args: [1],\r\n        msg: 'Email is required.'\r\n      },\r\n      isEmail: {\r\n        msg: 'Email must be valid'\r\n      }\r\n    }\r\n  };\r\n\r\n  var errors = validate(req.body, rules);\r\n\r\n  if (errors)\r\n    return res.json({\r\n      status: 'fail'\r\n      data: errors\r\n      }); // TIP: You can use 'jsender' module.\r\n\r\n  // ...\r\n  // Save req.body to database\r\n});\r\n```\r\n\r\nExample using [koa](koajs.com), assuming `koa-router` middleware is already setup:\r\n```javascript\r\nvar validate = require('validictorian'),\r\n  parse = require('co-body');\r\n\r\napp.post('/users', function *(){\r\n  var body = yield parse(this);\r\n\r\n  var rules = {\r\n    name: {\r\n      isLength: {\r\n        args: [1],\r\n        msg: 'Name is required.'\r\n      }\r\n    },\r\n\r\n    email: {\r\n      isLength: {\r\n        args: [1],\r\n        msg: 'Email is required.'\r\n      },\r\n      isEmail: {\r\n        msg: 'Email must be valid'\r\n      }\r\n    }\r\n  };\r\n\r\n  var errors = validate(body, rules);\r\n\r\n  if (errors)\r\n    return this.body= {\r\n      status: 'fail',\r\n      data: errors\r\n    }; // TIP: You can use 'koa-jsend' module.\r\n\r\n  // ...\r\n  // Save req.body to database\r\n});\r\n```\r\n\r\nCan be used similarly in other frameworks.\r\n\r\n## API\r\n\r\n### validate(body, rules, mapped)\r\n\r\n`body` and `rules` are the only required arguments.\r\n\r\n#### `body`\r\n\r\nAn object containing the fields to be validated as `key, value` pairs.\r\n\r\nExample:\r\n```javascript\r\nvar body = {\r\n  name: 'Samora Dake',\r\n  email: 'samora@example.com',\r\n  phone: '',\r\n  gender: 'M',\r\n  age: '27'\r\n};\r\n```\r\n\r\n#### `rules`\r\n\r\nAn object stating the rules used to validate `body`. Takes the following format:\r\n\r\n```\r\n{\r\n  <field>: {\r\n    <validator>: {\r\n      args: <Optional array of arguments to validator function>,\r\n      msg: <Required message in case validation fails>\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhere `<field>` is the field in  `body` and `<validator>` is the validator method.\r\nAll validators in [validator](https://github.com/chriso/validator.js#validators) can be used.\r\n\r\nExample:\r\n```javascript\r\nvar rules = {\r\n  name: {\r\n    isLength: {\r\n      args: [1],\r\n      msg: 'Name is required.'\r\n    }\r\n  },\r\n\r\n  email: {\r\n    isEmail: {\r\n      msg: 'Email must be valid.'\r\n    }\r\n  },\r\n\r\n  gender: {\r\n    isLength: {\r\n      args: [1, 1],\r\n      msg: 'Gender must be 1 character long.'\r\n    },\r\n\r\n    isIn: {\r\n      args: [['M', 'F']]\r\n      msg: 'Gender must be M or F.'\r\n    }\r\n  },\r\n\r\n  age: {\r\n    isLength: {\r\n      args: [1],\r\n      msg: 'Age is required.'\r\n    },\r\n\r\n    isInt: {\r\n      msg: 'Age must be number.'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Tests\r\n\r\n```\r\nnpm install -g mocha\r\n```\r\n\r\nThen\r\n```\r\nnpm test\r\n```\r\n\r\n## License\r\n\r\nMIT",
  "readmeFilename": "README.md",
  "_id": "validictorian@0.0.1",
  "dist": {
    "shasum": "9b60f1e3d5339d451a991a323db684a92f266710"
  },
  "_from": "validictorian@",
  "_resolved": "https://registry.npmjs.org/validictorian/-/validictorian-0.0.1.tgz"
}
